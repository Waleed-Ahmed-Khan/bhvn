'''
import pandas as pd
#import streamlit.components.v1 as components
import streamlit as st
#from dataprep.eda import create_report
import codecs, userManagement

def st_display_report(report_html,width=1100,height=9000):
    report_file = codecs.open(report_html,'r')
    page = report_file.read()
    components.html(page, width=width,height=height,scrolling=True) 

def render_eda(username):
    st.subheader("Perform EDA (Exploratory Data Analysis) on you dataset!") 
    def dataprep():
        uploaded_file = st.file_uploader('Choose a file having ".csv" extention')
        #period = int(st.sidebar.number_input('Enter the number of days to be predicted'))
        lets_go = st.button("Let's Go!")
        if lets_go:
            try:
                if uploaded_file is not None:
                    # To read file as bytes:
                    #data = uploaded_file.getvalue().decode('utf-8')
                    df = pd.read_csv(uploaded_file)
                    
		    #report = create_report(df)
                    #report.save('my_report')
                    #st_display_report('my_report.html')
                    userManagement.app_logger(username, "EDA")
                    profile = ProfileReport(df)
                    
                    #st.markdown(report.show_browser(), unsafe_allow_html=True)
                    #HtmlFile = open("my.html", 'r', encoding='utf-8') 
                    #source_code = HtmlFile.read() 
                    #import streamlit.components.v1 as components
                    #components.html(source_code)

                    #report = sv.analyze(df)
                    #report.show_html(open_browser=False, layout='vertical', scale=1.0)
                                            #overview= {'reproduction':False})
                    pandas_profiling.ProfileReport(data, 
                               correlations={'pearson':False,'spearman':False,'kendall':False,'phi_k':False,'cramers':False,'recoded':False},
                               missing_diagrams={'bar':False,'matrix':False,'heatmap':False,'dendrogram':False})
                    #st_profile_report(profile)
                        # Use the analysis function from sweetviz module to create a 'DataframeReport' object.
                    #analysis = sv.analyze([df,'EDA'], feat_cfg=sv.FeatureConfig(force_text=[]), target_feat=None)
                    #analysis.show_html(filepath='./EDA.html', open_browser=False, layout='vertical', scale=1.0)
                    #components.iframe(src='http://localhost:8501/EDA.html', width=1100, height=1200, scrolling=True)

            except Exception as e :
                st.markdown(e)
    dataprep()
'''
import pandas as pd
import streamlit as st
from streamlit_pandas_profiling import st_profile_report
from pandas_profiling import ProfileReport
import static.formatHelper as fh

def render_eda(username):
    st.subheader("EDA (Exploratory Data Analysis)")
    uploaded_file = st.file_uploader('ðŸ“¤ Upload A file ')
    #period = int(st.sidebar.number_input('Enter the number of days to be predicted'))
    st.write(fh.format_st_button(), unsafe_allow_html=True)
    lets_go = st.button("ðŸ“ŠGenerate Report")
    if lets_go:
        if uploaded_file is not None:
            try:
                df = pd.read_excel(uploaded_file, engine = 'openpyxl')
                cols = [col for col in df.columns]
                d_types = [i.name for i in df.dtypes.tolist()]
                variable_dict = dict(zip(cols, d_types)) 


                profile = ProfileReport(df,

                                        title="Exploratory Data Analysis",

                        dataset={

                        "description": f'This report has been generated by "{str.title(username)}"',

                        "copyright_holder": "Blue Horizon Vietnam",

                        "copyright_year": "2021-2022",

                        "url": "https://bhvn.ml",

                    },
                        variables={
                            

                        "descriptions": variable_dict
                        })
                #st.markdown(profile.to_html(), unsafe_allow_html=True)
                st_profile_report(profile)
            except Exception as e:
                #raise e
                st.error(f"Dear {str.title(username)}, Something went wrong. Please contact admin in case the problem persists. We are sorry ðŸ˜Œ")  